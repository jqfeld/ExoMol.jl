var documenterSearchIndex = {"docs":
[{"location":"#ExoMol","page":"Home","title":"ExoMol","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ExoMol.jl provides convenience wrappers for downloading ExoMol line lists and turning them into Julia-friendly structures.  It handles fetching datasets as artifacts, parsing the associated definition files and reading the compressed state and transition catalogues.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ExoMol\n\n# Retrieve the master catalogue that lists all available molecules\nmaster = get_exomol_master()\n\n# Load a dataset and inspect its contents\niso = load_isotopologue(\"CO\", \"12C-16O\", \"Li2015\")\n@info \"Loaded $(length(iso.states)) states\" first(iso.states)\n@info \"Loaded $(length(iso.transitions)) transitions\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Isotopologue struct bundles the dataset definition, states and transitions.  See the API reference below for detailed descriptions of the helper functions involved in constructing it.","category":"page"},{"location":"#Reference","page":"Home","title":"Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#ExoMol.Isotopologue","page":"Home","title":"ExoMol.Isotopologue","text":"Isotopologue(definitions, states, transitions)\n\nComposite type holding all data associated with an ExoMol isotopologue.\n\nFields\n\ndefinitions::Dict: Dataset definition metadata.\nstates::Vector: Parsed molecular states (typically NamedTuples).\ntransitions::Vector{Transition}: Transition catalogue.\n\n\n\n\n\n","category":"type"},{"location":"#ExoMol.Transition","page":"Home","title":"ExoMol.Transition","text":"Transition(upper_id, lower_id, A, wavenumber)\n\nContainer holding a single transition from an ExoMol .trans file.\n\nFields\n\nupper_id::Int: Identifier of the upper energy level.\nlower_id::Int: Identifier of the lower energy level.\nA::Float64: Einstein A coefficient (s⁻¹).\nwavenumber::Float64: Transition wavenumber (cm⁻¹).\n\n\n\n\n\n","category":"type"},{"location":"#ExoMol.get_exomol_dataset-Tuple{Any, Any, Any}","page":"Home","title":"ExoMol.get_exomol_dataset","text":"get_exomol_dataset(molecule, isotopologue, dataset; force=false, verbose=false)\n\nDownload a specific ExoMol dataset and cache it as an artifact.\n\nArguments\n\nmolecule: Molecular formula (e.g. \"H2O\").\nisotopologue: Isotopologue identifier as used by ExoMol (e.g. \"1H2-16O\").\ndataset: Dataset label (e.g. \"POKAZATEL\").\nforce::Bool=false: Re-download the dataset even if it already exists in the artifact cache.\nverbose::Bool=false: Forward verbose output to Downloads.download.\n\nReturns\n\nString: Path to the local artifact directory that contains the dataset definition and accompanying data files.\n\nThe returned directory contains at least the .def.json, .states.bz2 and .trans.bz2 files required to load the dataset into Julia using load_isotopologue.\n\n\n\n\n\n","category":"method"},{"location":"#ExoMol.get_exomol_master-Tuple{}","page":"Home","title":"ExoMol.get_exomol_master","text":"get_exomol_master(; force=false)\n\nRetrieve the ExoMol master catalogue as a parsed JSON object.\n\nArguments\n\nforce::Bool=false: Re-download the catalogue even if it already exists in the artifact cache.\n\nReturns\n\nDict{String,Any}: Parsed contents of the ExoMol master catalogue.\n\n\n\n\n\n","category":"method"},{"location":"#ExoMol.get_exomol_master_file-Tuple{}","page":"Home","title":"ExoMol.get_exomol_master_file","text":"get_exomol_master_file(; force=false)\n\nDownload the ExoMol master catalogue as an artifact and return its local path.\n\nArguments\n\nforce::Bool=false: Re-download the catalogue even if it already exists in the artifact cache.\n\nReturns\n\nString: Absolute path to the downloaded exomol.all.json file.\n\nThis function is primarily intended to be used internally.  For direct access to the parsed catalogue use get_exomol_master.\n\n\n\n\n\n","category":"method"},{"location":"#ExoMol.load_isotopologue-Tuple{Any, Any, Any}","page":"Home","title":"ExoMol.load_isotopologue","text":"load_isotopologue(molecule, isotopologue, dataset)\n\nConvenience method that downloads an ExoMol dataset (if necessary) and loads it into an Isotopologue struct.\n\nArguments\n\nmolecule: Molecular formula (e.g. \"H2O\").\nisotopologue: ExoMol isotopologue identifier.\ndataset: Dataset label.\n\nReturns\n\nIsotopologue: Parsed isotopologue data ready for analysis.\n\n\n\n\n\n","category":"method"},{"location":"#ExoMol.load_isotopologue-Tuple{Any}","page":"Home","title":"ExoMol.load_isotopologue","text":"load_isotopologue(folder)\n\nLoad an isotopologue from a directory containing ExoMol dataset files.\n\nArguments\n\nfolder::AbstractString: Directory holding .def.json, .states* and .trans* files belonging to an ExoMol dataset.\n\nReturns\n\nIsotopologue: Parsed isotopologue data ready for analysis.\n\n\n\n\n\n","category":"method"},{"location":"#ExoMol.parse_exomol_master-Tuple{String}","page":"Home","title":"ExoMol.parse_exomol_master","text":"parse_exomol_master(filepath::String)\n\nParse the ExoMol master file and return structured data.\n\nArguments\n\nfilepath::String: Path to the master file (JSON format)\n\nReturns\n\nReturns the parsed JSON structure\n\nExamples\n\nmaster_path = download_exomol_master()\ndata = parse_exomol_master(master_path)\n\n\n\n\n\n","category":"method"},{"location":"#ExoMol.read_def_file-Tuple{Any}","page":"Home","title":"ExoMol.read_def_file","text":"read_def_file(filename)\n\nParse an ExoMol dataset definition (.def.json) file.\n\nArguments\n\nfilename::AbstractString: Path to the definition file.  Compressed files are not supported and the filename must end in .json.\n\nReturns\n\nDict{String,Any}: Parsed JSON data structure describing the dataset.\n\n\n\n\n\n","category":"method"},{"location":"#ExoMol.read_state_file","page":"Home","title":"ExoMol.read_state_file","text":"read_state_file(filename[, def])\n\nRead an ExoMol .states file and return the parsed state records.\n\nArguments\n\nfilename::AbstractString: Path to a .states or .states.bz2 file.\ndef: Optional dataset definition as returned by read_def_file. When omitted the function looks for a sibling .def.json file.\n\nReturns\n\nVector{NamedTuple}: State records with field names and types inferred from the dataset definition.\n\n\n\n\n\n","category":"function"},{"location":"#ExoMol.read_trans_file-Tuple{Any}","page":"Home","title":"ExoMol.read_trans_file","text":"read_trans_file(filename)\n\nRead an ExoMol .trans file and return the transitions contained in it.\n\nArguments\n\nfilename::AbstractString: Path to a .trans or .trans.bz2 file.\n\nReturns\n\nVector{Transition}: Parsed transition records.\n\n\n\n\n\n","category":"method"}]
}
